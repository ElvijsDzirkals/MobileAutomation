pipeline {
    agent any
    triggers {
        pollSCM('*/1 * * * *')
    }
    stages {
        stage('Build') {
            steps {
                script {
                    echo "Add steps for building the new app/site"
                }
            }
            post {
                failure {
                    script {
                        sh 'bash send_message.sh "Building the web app" 1'
                    }
                }
                success {
                    script {
                        sh 'bash send_message.sh "Building the web app" 0'
                    }
                }
            }
        }
        stage('Deploy-staging') {
            steps {
                script {
                    deploy("staging")
                }
            }
            post {
                failure {
                    script {
                        sh 'bash send_message.sh "Deploying to staging" 1'
                    }
                }
                success {
                    script {
                        sh 'bash send_message.sh "Deploying to staging" 0'
                    }
                }
            }
        }
        stage('Tests on staging') {
            steps {
                script {
                    test("staging")
                }
            }
            post {
                failure {
                    script {
                        sh 'bash send_message.sh "Testing staging" 1'
                    }
                }
                success {
                    script {
                        sh 'bash send_message.sh "Testing staging" 0'
                    }
                }
                always {
                    allureReport()
                }
            }
        }
        stage('Deploy-prod') {
            steps {
                script {
                    deploy("prod")
                }
            }
            post {
                failure {
                    script {
                        sh 'bash send_message.sh "Deploying to prod" 1'
                    }
                }
                success {
                    script {
                        sh 'bash send_message.sh "Deploying to prod" 0'
                    }
                }
            }
        }
        stage('Prod Tests') {
            steps {
                script {
                    test("prod")
                }
            }
            post {
                failure {
                    script {
                        sh 'bash send_message.sh "Testing prod" 1'
                    }
                }
                success {
                    script {
                        sh 'bash send_message.sh "Testing prod" 0'
                    }
                }
                always {
                    allureReport()
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'cucumber/*.html ,logs/appium_logs/*.log' , allowEmptyArchive: true
        }
    }
}

def deploy(String environment) {
    echo "Deployment to ${environment} triggered..."
}

def test(String environment) {
    sh "bundle install"
    sh "ruby main.rb --environment ${environment}"
}

def allureReport() {
    allure results: [[path: 'reports/allure-results/*']]
}